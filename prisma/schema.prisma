datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password  String
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  chats         ChatMember[]
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  location      String?
  website       String?
  profilePic    String?
  coverPic      String?
}

model Post {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content       String
  image         String?
  likes         Like[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id            String   @id @default(cuid())
  postId        String
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content       String
  likes         Like[]
  createdAt     DateTime @default(now())
}

model Like {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId        String?
  post          Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId     String?
  comment       Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model Follow {
  id            String   @id @default(cuid())
  followerId    String
  follower      User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId   String
  following     User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model Chat {
  id            String        @id @default(cuid())
  members       ChatMember[]
  messages      Message[]
  isGroupChat   Boolean       @default(false)
  createdAt     DateTime      @default(now())
}

model ChatMember {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId        String
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model Message {
  id            String   @id @default(cuid())
  chatId        String
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content       String
  image         String?
  createdAt     DateTime @default(now())
  isRead        Boolean  @default(false)
}